
basedir_input = config["phylo_refdir"]
basedir_output = config["out_files"]


rule predictORFs:
	input:
		bin = bin_file_pattern,
	output:
		aa = basedir_output + "/gene_pred/{bin}/{bin}.fa",
		aaindex = basedir_output + "/gene_pred/{bin}/{bin}.fa.fai",
		gff = basedir_output + "/gene_pred/{bin}/{bin}.gff"
	benchmark:
		basedir_output + "/gene_pred/{bin}/{bin}_prodg_bench.tsv"
	log:
		basedir_output + "/gene_pred/{bin}/{bin}.log"
	conda:
		"envs/KnuttBinPhylo.yml"
	message:
		"Predicting genes in {wildcards.bin}"
	shell:
		"prodigal -g 11 -p meta -f gff -i {input.bin} -a {output.aa} -o {output.gff} &> {log} && samtools faidx {output.aa}"

rule downloadBUSCO:
	output:
		directory("reference_data/BUSCO")
	message:
		"Downloading BUSCO data"
	shell:
		"mkdir {output} && wget -q -r -nH -np -e robots=off --cut-dirs=2 -P {output} -R 'index.html*' https://busco-data.ezlab.org/v4/data/"
rule busco:
	input:
		bin = basedir_output + "/gene_pred/{bin}/{bin}.fa",
#		data = directory("reference_data/BUSCO")
	params:
		outname = "{bin}_BUSCO",
		outdir = basedir_output + "/BUSCO/{bin}"
	output:
		out = directory(basedir_output + "/BUSCO/{bin}/{bin}_BUSCO"),
#		conf = temp(basedir_output + "/BUSCO/{bin}/{bin}_BUSCO.conf")
	benchmark:
		basedir_output + "/BUSCO/{bin}/{bin}_BUSCO_bench.tsv"
	log:
		basedir_output + "/BUSCO/{bin}/{bin}_BUSCO.log"
	shadow:
		"full"
	conda:
		"envs/raxml.yml"
	threads:
		8
	message:
		"Running BUSCO on {wildcards.bin}"
	shell:
		"busco -m proteins -i {input.bin} -o {params.outname} -f --out_path {params.outdir} --auto-lineage-prok &> {log}"
#sed $BUSCO_CONFIG_FILE -e 's/.busco_downloads/{input.data}/' && --offline
rule buscos:
	input:
		expand(basedir_output + "/BUSCO/{bin}/{bin}_BUSCO",bin=bins)

rule hmmsearch:
	input:
		bin = basedir_output + "/gene_pred/{bin}/{bin}.fa",
		bin_index = basedir_output + "/gene_pred/{bin}/{bin}.fa.fai",
		model = template_model
	output:
		std = basedir_output + "/hmmsearch/{bin}/{bin}.{marker}.hmmout",
		tbl = basedir_output + "/hmmsearch/{bin}/{bin}.{marker}.tblout",
		reg = temp(basedir_output + "/hmmsearch/{bin}/{bin}.{marker}.regions"),
		fasta = basedir_output + "/hmmsearch/{bin}/{bin}.{marker}.fasta"
	benchmark:
		basedir_output + "/hmmsearch/{bin}/{bin}.{marker}_hmmer_bench.tsv"
	log:
		basedir_output + "/hmmsearch/{bin}/{bin}.{marker}.hmmlog"
	group:
		"hmmsearch"
	conda:
		"envs/KnuttBinPhylo.yml"
	threads:
		1
	message: 
		"Searching for {wildcards.marker} in {wildcards.bin}"
	shell:
		("hmmsearch --cpu {threads} --cut_ga --tblout {output.tbl}  {input.model} {input.bin} > {output.std} 2> {log} && "
		 "sed '/^#/d' {output.tbl} | tr -s ' ' | cut -d ' ' -f 1 > {output.reg} && if [ -s {output.reg} ] ; then "
		 "samtools faidx {input.bin} -r {output.reg} | awk '/^>/{{sub(\">\",\">{wildcards.bin}...{wildcards.marker}...\")}}1' > {output.fasta}; else touch {output.fasta}; fi")


rule combine_markerhits:
	input:
		expand(basedir_output + "/hmmsearch/{bin}/{bin}.{marker}.fasta", bin=bins, marker="{marker}")
	output:
		basedir_output + "/alignment/{marker}_unaligned.fasta",
	message:
		"Combining hits for {wildcards.marker} into a single file"
	shell:
		"cat {input} | sed 's/*//g' > {output}"

rule align_bin_seqs:
	input:
		exis = template_aln + ".fa",
		newseqs = basedir_output + "/alignment/{marker}_unaligned.fasta",
	output:
		basedir_output + "/alignment/{marker}_aligned.fasta",
	benchmark:
		basedir_output + "/alignment/{marker}_aligned_bench.tsv"
	log:
		basedir_output + "/alignment/{marker}_aligned.log",
	conda:
		"envs/KnuttBinPhylo.yml"
	threads:
		8
	message:
		"Aligning hits for {wildcards.marker}"
	shell:
		"mafft --maxiterate 0 --thread {threads} --add {input.newseqs} --keeplength --reorder {input.exis} > {output} 2> {log}"

rule create_bin_proteomes:
	input:
		markers = basedir_phyldbs + "/marker_stats.tsv",
		proteomes = basedir_phyldbs + "/proteomes.tsv",
		markeraligned = expand(basedir_output + "/alignment/{marker}_aligned.fasta", marker=markers),
		tax = rules.ncbi_translator.output
	params:
		markers = marker_names,
		markercompl = 50
	output:
		tabular = basedir_output + "/totree.tsv",
		seq = basedir_output + "/tree/totree.fasta",
		part = basedir_output + "/tree/totree.part"
	benchmark:
		basedir_output + "/tree/totree_bench.tsv"
	conda:
		"envs/R.yml"
	threads:
		8
	message:
		"Creating bin sequences"
	script:
		"scripts/createBinAlignment.R"

rule tree:
	input:
		alignment = basedir_output + "/tree/totree.fasta",
		partitions = basedir_output + "/tree/totree.part"
	params:
		bootstraps = 100,
		parsimonyseed = 1234,
		rapidbootstrapseed = 1234,
		defaultmodel = "PROTGAMMALG",
		dir = basedir_output + "/tree/"
	output:
		bestparsimonytree = basedir_output + "/tree/RAxML_bestTree.run",
		bipartitionnodelabels = basedir_output + "/tree/RAxML_bipartitions.run",
		bipartitionbranchlabels = basedir_output + "/tree/RAxML_bipartitionsBranchLabels.run",
		bootstraptrees = basedir_output + "/tree/RAxML_bootstrap.run",
		internallog = basedir_output + "/tree/RAxML_info.run"
	log:
		internallog = basedir_output + "/tree/run.log"
	conda:
		"envs/raxml.yml"
	threads:
		64
	shell:
		("raxmlHPC-PTHREADS-AVX2 -p {params.parsimonyseed} -x {params.rapidbootstrapseed} "
		 "-T {threads} -f a -m {params.defaultmodel} -s {input.alignment} -q {input.partitions} "
		 " -# {params.bootstraps} -n run -w $(readlink -f {params.dir}) &> {log}")
